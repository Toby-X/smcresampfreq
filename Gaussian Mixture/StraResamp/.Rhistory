omega[k,i,] = omega.tmp[k,]
}else{
omega[k,i,] = omega[k,i-1,]
}
divident = 0
for (j in 1:n) {
divident = divident + exp(log.fn(i-1,mu[j,i-1,],lambda[j,i-1,],omega[j,i-1,]))*Kn(mu[k,i,],lambda[k,i,],omega[k,i,],mu[j,i-1,],lambda[j,i-1,],omega[j,i-1,])
}
w_u.tmp[k] = exp(log.fn(i,mu[k,i,],lambda[k,i,],omega[k,i,]))/divident
}
if (any(w_u.tmp<1e-10)){
w_u.tmp = w_u.tmp*1e10
}
w_u = w_n*w_u.tmp
w_n = w_u/sum(w_u)
# if (any(is.na(w_n))){
#   lambda[,,1] = 9999
#   lambda[,,2] = 0
#   omega[,,1] = 1
#   omega[,,2] = 0
#   mu[,,1] = 9999
#   mu[,,2] = 0
#   break
# }
## Resampling
if (1/sum(w_n^2)<threshold){
idx = sample(1:n,n,replace=T,prob=w_n)
lambda = lambda[idx,,]
mu = mu[idx,,]
omega = omega[idx,,]
w_n = rep(1/n,n)
}
sprintf("已完成 %d%%", round(i*100/p))
}
idx1 = mu[,50,1]>8
idx2 = mu[,50,2]>8
mu10 = c(mu[idx1,50,1],mu[idx2,50,2])
mu7 = c(mu[!idx1,50,1],mu[!idx2,50,2])
#str(mu7)
#str(mu10)
hist(mu7)
hist(mu10)
omega10 = c(omega[idx1,50,1],omega[idx2,50,2])
omega7 = c(omega[!idx1,50,1],omega[!idx2,50,2])
hist(omega10)
lambda_all = c(lambda[,50,1],lambda[,50,2])
hist(lambda_all)
print(1,2)
cat(1,2)
1/NaN < 5
w_u.tmp = rep(1e10,200)
w_n = w_u.tmp/sum(w_u.tmp)
w_n
any(is.na(w_n))
warning(123)
library(parallel)
library(doParallel)
library(foreach)
library(doSNOW)
#using residual ressampling
resresample <- function(w){
n = length(w)
a = rep(0,n)
nw = n*w
intpart = floor(nw)
sip = sum(intpart)
res = nw - intpart
sres = n - sip
a[1:sip] = rep(1:n,intpart)
if (sres > 0){
a[(sip+1):n] = sample(res/sres,sres)
}
return(a)
}
a = rep(1/5,5)
resresample(a)
path1 = file.choose()
mixture.dat = read.table(path1,header=TRUE)
y = mixture.dat$y
## libraries
library(Boom)
## Given Value
n = 500
p = 50
mu = array(rep(0,n*p*2),c(n,p,2))# the first layer is mu1, the second layer is mu2, the same is as follows
lambda = array(rep(0,n*p*2),c(n,p,2))
omega = array(rep(0,n*p*2),c(n,p,2))
wu = rep(0,n)
threshold = n
# prior choices from Richardson and Green P735
kexi = mean(y)
R = max(y)-min(y)
K = 1/R^2
set.seed(101)
beta = rgamma(1,0.2,10/R^2)
alpha = 2
delta = 1
#using residual ressampling
resresample <- function(w){
n = length(w)
a = rep(0,n)
nw = n*w
intpart = floor(nw)
sip = sum(intpart)
res = nw - intpart
sres = n - sip
a[1:sip] = rep(1:n,intpart)
if (sres > 0){
a[(sip+1):n] = sample(res/sres,sres)
}
return(a)
}
##the data is generated from .7*dnorm(x,7,.5) + .3*dnorm(x,10,.5)
## pin is proportional to likelihood(y;theta_r)^phi_n * f(theta_r)
## update mu via additive normal random-walk proposal
## lambda via multiplicative log-normal random-walk
## omega via additive normal random-walk
log.likelihood <- function(mu,lambda,omega){
sum(log(omega[1]*dnorm(y,mu[1],lambda^(-1/2))+omega[2]*dnorm(y,mu[2],lambda^(-1/2))))
}
## using one iteration of MH kernel
## using first 50 steps of annealing
## using dnorm(0,1) as proposal in initial state and in MCMC
phi <- function(n){
if (n<=10){
return(n*0.01/10)
}else{
r = (1/0.01)^(1/40)
return(0.01*r^(n-10))
}
}
log.fn <- function(n,mu,lambda,omega){
res = log.likelihood(mu,lambda,omega)*phi(n)+sum(log(dnorm(mu,kexi,K^(-1/2))))+
sum(log(dgamma(lambda,alpha,beta)))+sum(log(ddirichlet(omega,c(delta,delta))))
return(res)
}
## 这里lognormal multiplicative还要再推导一下，现在是推导出来的结果
acceptance <- function(n,mu,lambda,omega,mut,lambdat,omegat){
u = exp(omega[1])/(1+exp(omega[1]))
ut = exp(omegat[1])/(1+exp(omegat[1]))
log.res = log.fn(n,mu,lambda,omega)-log.fn(n,mut,lambdat,omegat)+
log(omegat[1]*(1-omegat[1])/(omega[1]*(1-omega[1])))+
sum(log(lambda)-log(lambdat))
res = exp(log.res)
return(min(res,1))
}
acceptance.mu <- function(n,mu,lambda,omega,mut,lambdat,omegat){
log.res = log.fn(n,mu,lambda,omega)-log.fn(n,mut,lambdat,omegat)
res = exp(log.res)
return(min(res,1))
}
acceptance.lambda1 <- function(n,mu,lambda,omega,mut,lambdat,omegat){
log.res = log.fn(n,mu,lambda,omega)-log.fn(n,mut,lambdat,omegat)+log(lambda[1])-log(lambdat[1])
res = exp(log.res)
return(min(res,1))
}
acceptance.lambda2 <- function(n,mu,lambda,omega,mut,lambdat,omegat){
log.res = log.fn(n,mu,lambda,omega)-log.fn(n,mut,lambdat,omegat)+log(lambda[2])-log(lambdat[2])
res = exp(log.res)
return(min(res,1))
}
acceptance.omega <- function(n,mu,lambda,omega,mut,lambdat,omegat){
u = exp(omega[1])/(1+exp(omega[1]))
ut = exp(omegat[1])/(1+exp(omegat[1]))
log.res = log.fn(n,mu,lambda,omega)-log.fn(n,mut,lambdat,omegat)+
log(omegat[1]*(1-omegat[1])/(omega[1]*(1-omega[1])))
res = exp(log.res)
return(min(res,1))
}
## Next step is to write the whole process including weight
Kn <- function(mu,lambda,omega,mut,lambdat,omegat){
u = exp(omega[1])/(1+exp(omega[1]))
ut = exp(omegat[1])/(1+exp(omegat[1]))
res = sum(log(dnorm(mu-mut,0,.1)))+sum(log(dlnorm(lambda/lambdat,0,.1)))+
log(dnorm(u-ut,0,.1))-log(omega[1])-log(1-omega[1])
res = exp(res)
return(res)
}
## Using suboptimal backward kernels
## extract the first sample
for (i in 1:n){
mu[i,1,] = rnorm(2,kexi,K^(-1/2))
lambda[i,1,] = rgamma(2,alpha,beta)
omega[i,1,] = rdirichlet(1,c(delta,delta))
}
## estimate weights for step 1
w_u = rep(1,n)
for (i in 1:n) {
w_u[i] = exp(log.fn(1,mu[i,1,],lambda[i,1,],omega[i,1,]))/prod(dnorm(mu[i,1,],kexi,K^(-1/2)))/prod(dgamma(lambda[i,1,],alpha,beta))/ddirichlet(omega[i,1,],c(delta,delta))
}
if (any(is.na(w_u))){
idx.na = is.na(w_u)
w_u[idx.na]=0
}
w_n = w_u/sum(w_u)
if (1/sum(w_n^2) < threshold){
idx = resresample(w_n)
lambda = lambda[idx,,]
mu = mu[idx,,]
omega = omega[idx,,]
w_n = rep(1/n,n)
}
##monitor accepted times
ac.mu = array(rep(0,n*p),c(n,p))
ac.lambda = array(rep(0,n*p*2),c(n,p,2))
ac.omega = array(rep(0,n*p),c(n,p))
## MAIN LOOP
star_time <- Sys.time()
w_u.tmp = rep(1,n)
i = 2
## MCMC Move
mu.update = array(rnorm(n*2,0,.1),c(n,2))
mu.tmp = mu[,i-1,]+mu.update
str(mu[,i-1,])
str(mu.update)
## Using suboptimal backward kernels
## extract the first sample
for (i in 1:n){
mu[i,1,] = rnorm(2,kexi,K^(-1/2))
lambda[i,1,] = rgamma(2,alpha,beta)
omega[i,1,] = rdirichlet(1,c(delta,delta))
}
mu = array(rep(0,n*p*2),c(n,p,2))# the first layer is mu1, the second layer is mu2, the same is as follows
lambda = array(rep(0,n*p*2),c(n,p,2))
omega = array(rep(0,n*p*2),c(n,p,2))
wu = rep(0,n)
## Using suboptimal backward kernels
## extract the first sample
for (i in 1:n){
mu[i,1,] = rnorm(2,kexi,K^(-1/2))
lambda[i,1,] = rgamma(2,alpha,beta)
omega[i,1,] = rdirichlet(1,c(delta,delta))
}
## estimate weights for step 1
w_u = rep(1,n)
for (i in 1:n) {
w_u[i] = exp(log.fn(1,mu[i,1,],lambda[i,1,],omega[i,1,]))/prod(dnorm(mu[i,1,],kexi,K^(-1/2)))/prod(dgamma(lambda[i,1,],alpha,beta))/ddirichlet(omega[i,1,],c(delta,delta))
}
if (any(is.na(w_u))){
idx.na = is.na(w_u)
w_u[idx.na]=0
}
w_n = w_u/sum(w_u)
w_n
w = w_n
w
n = length(w)
n
a = rep(0,n)
nw = n*w
intpart = floor(nw)
sip = sum(intpart)
sip
res = nw - intpart
sres = n - sip
sres
a[1:sip] = rep(1:n,intpart)
a[1:sip]
a[sip+1]
res
sres
if (sres > 0){
a[(sip+1):n] = sample(1:n,sres,prob=res/sres)
}
a[(sip+1):n]
#using residual ressampling
resresample <- function(w){
n = length(w)
a = rep(0,n)
nw = n*w
intpart = floor(nw)
sip = sum(intpart)
res = nw - intpart
sres = n - sip
a[1:sip] = rep(1:n,intpart)
if (sres > 0){
a[(sip+1):n] = sample(1:n,sres,prob=res/sres)
}
return(a)
}
if (1/sum(w_n^2) < threshold){
idx = resresample(w_n)
lambda = lambda[idx,,]
mu = mu[idx,,]
omega = omega[idx,,]
w_n = rep(1/n,n)
}
##monitor accepted times
ac.mu = array(rep(0,n*p),c(n,p))
ac.lambda = array(rep(0,n*p*2),c(n,p,2))
ac.omega = array(rep(0,n*p),c(n,p))
## MAIN LOOP
star_time <- Sys.time()
w_u.tmp = rep(1,n)
i= 2
## MCMC Move
mu.update = array(rnorm(n*2,0,.1),c(n,2))
mu.tmp = mu[,i-1,]+mu.update
lambda.update = array(rlnorm(n*2,0,.1),c(n,2))
?var
?trim
?mean
setwd("C:/Users/xuzhi/smcresampfreq/Gaussian Mixture/MulResamp")
load("p100MCMC1mul.RData")
trim_mean <- function(x){
mean(x,trim=0.05)
}
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
?apply
mse.mut = apply(mse.mu, 1, trim_mean)
str(mse.mut)
mse.mut = apply(mse.mu, 2, trim_mean)
str(mse.mut)
plot(mse.mut)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.lambda)
plot(mse.omega)
load("p50MCMC1mul.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
setwd("C:/Users/xuzhi/smcresampfreq/Gaussian Mixture/ResResamp")
load("p50MCMC1res.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
load("p100MCMC1res.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
setwd("C:/Users/xuzhi/smcresampfreq/Gaussian Mixture/StraResamp")
load("p50MCMC1stra.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
setwd("C:/Users/xuzhi/smcresampfreq/Gaussian Mixture/SysResamp")
load("p50MCMC1sys.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
load("p100MCMC1sys.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
?sample
setwd("C:/Users/xuzhi/smcresampfreq/Gaussian Mixture/MulResamp")
load("p50MCMC1mul.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
load("p100MCMC1mul.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
setwd("C:/Users/xuzhi/smcresampfreq/Gaussian Mixture/ResResamp")
load("p50MCMC1res.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
load("p100MCMC1res.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
load("p50MCMC1stra.RData")
setwd("C:/Users/xuzhi/smcresampfreq/Gaussian Mixture/StraResamp")
load("p50MCMC1stra.RData")
mse.mu = matrix(rep(0,m*length(threshold)),nrow=m)
mse.lambda = matrix(rep(0,m*length(threshold)),nrow=m)
mse.omega = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
mse.mu[i,] = res[i,]$mse.mu
mse.lambda[i,] = res[i,]$mse.lambda
mse.omega[i,] = res[i,]$mse.omega
}
mse.mu = apply(mse.mu, 2, trim_mean)
mse.lambda = apply(mse.lambda, 2, trim_mean)
mse.omega = apply(mse.omega, 2, trim_mean)
plot(mse.mu)
plot(mse.lambda)
plot(mse.omega)
