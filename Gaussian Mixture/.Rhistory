mu = mu[idx,,,]
omega = omega[idx,,,]
w_n = rep(1/n,n)
}
}
idx1 = mu[,50,1,j]>8
idx2 = mu[,50,2,j]>8
mu10 = c(mu[idx1,50,1,j],mu[idx2,50,2,j])
mu7 = c(mu[!idx1,50,1,j],mu[!idx2,50,2,j])
omega10 = c(omega[idx1,50,1,j],omega[idx2,50,2,j])
omega7 = c(omega[!idx1,50,1,j],omega[!idx2,50,2,j])
lambda_all = c(lambda[,50,1,j],lambda[,50,2,j])
mse.mu[j] = mse.mu[j] + (mean(mu7)-7)^2+var(mu7)+(mean(mu10)-10)^2+var(mu10)
mse.omega[j] = mse.omega[j] +  (mean(omega10)-0.3)^2+var(omega10)
mse.lambda[j] = mse.lambda[j] + (mean(lambda_all)-4)^2+var(lambda_all)
}
mse.mu = mse.mu/n
mse.lambda = mse.lambda/n
mse.omega = mse.omega/n
return(list(mse.mu=mse.mu,mse.lambda=mse.lambda,mse.omega=mse.omega,mean.mu7=mean(mu7),mean.omega10=mean(omega10),mean.lambda=mean(lambda_all)))
}
res = foreach (l = 1:m,.combine = rbind,.packages = "Boom") %dopar% {
doit()
}
res = foreach (l = 1:m,.combine = rbind,.packages = "Boom") %dopar% {
set.seed(l)
doit()
}
doit <- function(){
mu = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))# the first layer is mu1, the second layer is mu2, the same is as follows
lambda = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))
omega = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))
mse.mu = rep(0,length(threshold))
mse.omega = rep(0,length(threshold))
mse.omega = rep(0,length(threshold))
for (j in 1:length(threshold)) {
for (i in 1:n){
mu[i,1,,j] = rnorm(2,kexi,K^(-1/2))
lambda[i,1,,j] = rgamma(2,alpha,beta)
omega[i,1,,j] = rdirichlet(1,c(delta,delta))
}
## estimate weights for step 1
for (i in 1:n) {
w_u[i] = exp(log.fn(1,mu[i,1,,j],lambda[i,1,,j],omega[i,1,,j]))/prod(dnorm(mu[i,1,,j],kexi,K^(-1/2)))/prod(dgamma(lambda[i,1,,j],alpha,beta))/ddirichlet(omega[i,1,,j],c(delta,delta))
}
w_n = w_u/sum(w_u)
if (1/sum(w_n^2) < n){
idx = sample(1:n,n,replace=T,prob=w_n)
lambda = lambda[idx,,,]
mu = mu[idx,,,]
omega = omega[idx,,,]
w_n = rep(1/n,n)
}
## MAIN LOOP
for (i in 2:p){
if (any(is.na(w_n))){
lambda[,,1,j] = 9999
lambda[,,2,j] = 0
omega[,,1,j] = 1
omega[,,2,j] = 0
mu[,,1,j] = 9999
mu[,,2,j] = 0
break
}
## MCMC Move
mu.update = array(rnorm(n*2,0,.1),c(n,2))
mu.tmp = mu[,i-1,,j]+mu.update
lambda.update = array(rlnorm(n*2,0,.1),c(n,2))
lambda.tmp = lambda[,i-1,,j]*lambda.update
u.update = rnorm(n,0,.1)
u.tmp = log(omega[,i-1,1,j]/(1-omega[,i-1,1,j]))+u.update
omega.tmp = omega[,i-1,,j]
omega.tmp[,1] = exp(u.tmp)/(1+exp(u.tmp))
omega.tmp[,2] = 1-omega.tmp[,1]
# 加个循环把每个样本都MCMC update了
## 这里由于三个一起update所以效益可能会低，要不要查查它update一共多少次
for (k in 1:n) {
acrate.mu = acceptance.mu(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.lambda1 = acceptance.lambda1(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.lambda2 = acceptance.lambda2(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.omega = acceptance.omega(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
rand = runif(1)
if (rand<=acrate.mu){
mu[k,i,,j] = mu.tmp[k,]
}else{
mu[k,i,,j] = mu[k,i-1,,j]
}
if (rand<=acrate.lambda1){
lambda[k,i,1,j] = lambda.tmp[k,1]
}else{
lambda[k,i,1,j] = lambda[k,i-1,1,j]
}
if (rand<=acrate.lambda2){
lambda[k,i,2,j] = lambda.tmp[k,2]
}else{
lambda[k,i,2,j] = lambda[k,i-1,2,j]
}
if (rand<=acrate.omega){
omega[k,i,,j] = omega.tmp[k,]
}else{
omega[k,i,,j] = omega[k,i-1,,j]
}
for (o in 1:n) {
divident = divident + exp(log.fn(i-1,mu[o,i-1,,j],lambda[o,i-1,,j],omega[o,i-1,,j]))*Kn(mu[k,i,,j],lambda[k,i,,j],omega[k,i,,j],mu[o,i-1,,j],lambda[o,i-1,,j],omega[o,i-1,,j])
}
w_u.tmp[k] = exp(log.fn(i,mu[k,i,,j],lambda[k,i,,j],omega[k,i,,j]))/divident
}
w_u = w_n*w_u.tmp
w_n = w_u/sum(w_u)
## Resampling
if (any(is.na(w_n))){
lambda[,,1,j] = 9999
lambda[,,2,j] = 0
omega[,,1,j] = 1
omega[,,2,j] = 0
mu[,,1,j,] = 9999
mu[,,2,j] = 0
break
}
if (1/sum(w_n^2)<threshold[j]){
idx = sample(1:n,n,replace=T,prob=w_n)
lambda = lambda[idx,,,]
mu = mu[idx,,,]
omega = omega[idx,,,]
w_n = rep(1/n,n)
}
}
idx1 = mu[,50,1,j]>8
idx2 = mu[,50,2,j]>8
mu10 = c(mu[idx1,50,1,j],mu[idx2,50,2,j])
mu7 = c(mu[!idx1,50,1,j],mu[!idx2,50,2,j])
omega10 = c(omega[idx1,50,1,j],omega[idx2,50,2,j])
omega7 = c(omega[!idx1,50,1,j],omega[!idx2,50,2,j])
lambda_all = c(lambda[,50,1,j],lambda[,50,2,j])
mse.mu[j] = mse.mu[j] + (mean(mu7)-7)^2+var(mu7)+(mean(mu10)-10)^2+var(mu10)
mse.omega[j] = mse.omega[j] +  (mean(omega10)-0.3)^2+var(omega10)
mse.lambda[j] = mse.lambda[j] + (mean(lambda_all)-4)^2+var(lambda_all)
}
mse.mu = mse.mu/n
mse.lambda = mse.lambda/n
mse.omega = mse.omega/n
return(list(mse.mu=mse.mu,mse.lambda=mse.lambda,mse.omega=mse.omega,mean.mu7=mean(mu7),mean.omega10=mean(omega10),mean.lambda=mean(lambda_all)))
}
res = foreach (l = 1:m,.combine = rbind,.packages = "Boom") %dopar% {
set.seed(l)
doit()
}
doit <- function(){
mu = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))# the first layer is mu1, the second layer is mu2, the same is as follows
lambda = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))
omega = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))
mse.mu = rep(0,length(threshold))
mse.omega = rep(0,length(threshold))
mse.omega = rep(0,length(threshold))
w_u = rep(0,n)
for (j in 1:length(threshold)) {
for (i in 1:n){
mu[i,1,,j] = rnorm(2,kexi,K^(-1/2))
lambda[i,1,,j] = rgamma(2,alpha,beta)
omega[i,1,,j] = rdirichlet(1,c(delta,delta))
}
## estimate weights for step 1
for (i in 1:n) {
w_u[i] = exp(log.fn(1,mu[i,1,,j],lambda[i,1,,j],omega[i,1,,j]))/prod(dnorm(mu[i,1,,j],kexi,K^(-1/2)))/prod(dgamma(lambda[i,1,,j],alpha,beta))/ddirichlet(omega[i,1,,j],c(delta,delta))
}
w_n = w_u/sum(w_u)
if (1/sum(w_n^2) < n){
idx = sample(1:n,n,replace=T,prob=w_n)
lambda = lambda[idx,,,]
mu = mu[idx,,,]
omega = omega[idx,,,]
w_n = rep(1/n,n)
}
## MAIN LOOP
for (i in 2:p){
if (any(is.na(w_n))){
lambda[,,1,j] = 9999
lambda[,,2,j] = 0
omega[,,1,j] = 1
omega[,,2,j] = 0
mu[,,1,j] = 9999
mu[,,2,j] = 0
break
}
## MCMC Move
mu.update = array(rnorm(n*2,0,.1),c(n,2))
mu.tmp = mu[,i-1,,j]+mu.update
lambda.update = array(rlnorm(n*2,0,.1),c(n,2))
lambda.tmp = lambda[,i-1,,j]*lambda.update
u.update = rnorm(n,0,.1)
u.tmp = log(omega[,i-1,1,j]/(1-omega[,i-1,1,j]))+u.update
omega.tmp = omega[,i-1,,j]
omega.tmp[,1] = exp(u.tmp)/(1+exp(u.tmp))
omega.tmp[,2] = 1-omega.tmp[,1]
# 加个循环把每个样本都MCMC update了
## 这里由于三个一起update所以效益可能会低，要不要查查它update一共多少次
for (k in 1:n) {
acrate.mu = acceptance.mu(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.lambda1 = acceptance.lambda1(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.lambda2 = acceptance.lambda2(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.omega = acceptance.omega(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
rand = runif(1)
if (rand<=acrate.mu){
mu[k,i,,j] = mu.tmp[k,]
}else{
mu[k,i,,j] = mu[k,i-1,,j]
}
if (rand<=acrate.lambda1){
lambda[k,i,1,j] = lambda.tmp[k,1]
}else{
lambda[k,i,1,j] = lambda[k,i-1,1,j]
}
if (rand<=acrate.lambda2){
lambda[k,i,2,j] = lambda.tmp[k,2]
}else{
lambda[k,i,2,j] = lambda[k,i-1,2,j]
}
if (rand<=acrate.omega){
omega[k,i,,j] = omega.tmp[k,]
}else{
omega[k,i,,j] = omega[k,i-1,,j]
}
for (o in 1:n) {
divident = divident + exp(log.fn(i-1,mu[o,i-1,,j],lambda[o,i-1,,j],omega[o,i-1,,j]))*Kn(mu[k,i,,j],lambda[k,i,,j],omega[k,i,,j],mu[o,i-1,,j],lambda[o,i-1,,j],omega[o,i-1,,j])
}
w_u.tmp[k] = exp(log.fn(i,mu[k,i,,j],lambda[k,i,,j],omega[k,i,,j]))/divident
}
w_u = w_n*w_u.tmp
w_n = w_u/sum(w_u)
## Resampling
if (any(is.na(w_n))){
lambda[,,1,j] = 9999
lambda[,,2,j] = 0
omega[,,1,j] = 1
omega[,,2,j] = 0
mu[,,1,j,] = 9999
mu[,,2,j] = 0
break
}
if (1/sum(w_n^2)<threshold[j]){
idx = sample(1:n,n,replace=T,prob=w_n)
lambda = lambda[idx,,,]
mu = mu[idx,,,]
omega = omega[idx,,,]
w_n = rep(1/n,n)
}
}
idx1 = mu[,50,1,j]>8
idx2 = mu[,50,2,j]>8
mu10 = c(mu[idx1,50,1,j],mu[idx2,50,2,j])
mu7 = c(mu[!idx1,50,1,j],mu[!idx2,50,2,j])
omega10 = c(omega[idx1,50,1,j],omega[idx2,50,2,j])
omega7 = c(omega[!idx1,50,1,j],omega[!idx2,50,2,j])
lambda_all = c(lambda[,50,1,j],lambda[,50,2,j])
mse.mu[j] = mse.mu[j] + (mean(mu7)-7)^2+var(mu7)+(mean(mu10)-10)^2+var(mu10)
mse.omega[j] = mse.omega[j] +  (mean(omega10)-0.3)^2+var(omega10)
mse.lambda[j] = mse.lambda[j] + (mean(lambda_all)-4)^2+var(lambda_all)
}
mse.mu = mse.mu/n
mse.lambda = mse.lambda/n
mse.omega = mse.omega/n
return(list(mse.mu=mse.mu,mse.lambda=mse.lambda,mse.omega=mse.omega,mean.mu7=mean(mu7),mean.omega10=mean(omega10),mean.lambda=mean(lambda_all)))
}
res = foreach (l = 1:m,.combine = rbind,.packages = "Boom") %dopar% {
set.seed(l)
doit()
}
doit <- function(){
mu = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))# the first layer is mu1, the second layer is mu2, the same is as follows
lambda = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))
omega = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))
mse.mu = rep(0,length(threshold))
mse.omega = rep(0,length(threshold))
mse.omega = rep(0,length(threshold))
w_u = rep(0,n)
for (j in 1:length(threshold)) {
for (i in 1:n){
mu[i,1,,j] = rnorm(2,kexi,K^(-1/2))
lambda[i,1,,j] = rgamma(2,alpha,beta)
omega[i,1,,j] = rdirichlet(1,c(delta,delta))
}
## estimate weights for step 1
for (i in 1:n) {
w_u[i] = exp(log.fn(1,mu[i,1,,j],lambda[i,1,,j],omega[i,1,,j]))/prod(dnorm(mu[i,1,,j],kexi,K^(-1/2)))/prod(dgamma(lambda[i,1,,j],alpha,beta))/ddirichlet(omega[i,1,,j],c(delta,delta))
}
w_n = w_u/sum(w_u)
if (1/sum(w_n^2) < n){
idx = sample(1:n,n,replace=T,prob=w_n)
lambda = lambda[idx,,,]
mu = mu[idx,,,]
omega = omega[idx,,,]
w_n = rep(1/n,n)
}
## MAIN LOOP
for (i in 2:p){
if (any(is.na(w_n))){
lambda[,,1,j] = 9999
lambda[,,2,j] = 0
omega[,,1,j] = 1
omega[,,2,j] = 0
mu[,,1,j] = 9999
mu[,,2,j] = 0
break
}
## MCMC Move
mu.update = array(rnorm(n*2,0,.1),c(n,2))
mu.tmp = mu[,i-1,,j]+mu.update
lambda.update = array(rlnorm(n*2,0,.1),c(n,2))
lambda.tmp = lambda[,i-1,,j]*lambda.update
u.update = rnorm(n,0,.1)
u.tmp = log(omega[,i-1,1,j]/(1-omega[,i-1,1,j]))+u.update
omega.tmp = omega[,i-1,,j]
omega.tmp[,1] = exp(u.tmp)/(1+exp(u.tmp))
omega.tmp[,2] = 1-omega.tmp[,1]
# 加个循环把每个样本都MCMC update了
## 这里由于三个一起update所以效益可能会低，要不要查查它update一共多少次
for (k in 1:n) {
acrate.mu = acceptance.mu(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.lambda1 = acceptance.lambda1(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.lambda2 = acceptance.lambda2(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.omega = acceptance.omega(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
rand = runif(1)
if (rand<=acrate.mu){
mu[k,i,,j] = mu.tmp[k,]
}else{
mu[k,i,,j] = mu[k,i-1,,j]
}
if (rand<=acrate.lambda1){
lambda[k,i,1,j] = lambda.tmp[k,1]
}else{
lambda[k,i,1,j] = lambda[k,i-1,1,j]
}
if (rand<=acrate.lambda2){
lambda[k,i,2,j] = lambda.tmp[k,2]
}else{
lambda[k,i,2,j] = lambda[k,i-1,2,j]
}
if (rand<=acrate.omega){
omega[k,i,,j] = omega.tmp[k,]
}else{
omega[k,i,,j] = omega[k,i-1,,j]
}
divident=0
for (o in 1:n) {
divident = divident + exp(log.fn(i-1,mu[o,i-1,,j],lambda[o,i-1,,j],omega[o,i-1,,j]))*Kn(mu[k,i,,j],lambda[k,i,,j],omega[k,i,,j],mu[o,i-1,,j],lambda[o,i-1,,j],omega[o,i-1,,j])
}
w_u.tmp[k] = exp(log.fn(i,mu[k,i,,j],lambda[k,i,,j],omega[k,i,,j]))/divident
}
w_u = w_n*w_u.tmp
w_n = w_u/sum(w_u)
## Resampling
if (any(is.na(w_n))){
lambda[,,1,j] = 9999
lambda[,,2,j] = 0
omega[,,1,j] = 1
omega[,,2,j] = 0
mu[,,1,j,] = 9999
mu[,,2,j] = 0
break
}
if (1/sum(w_n^2)<threshold[j]){
idx = sample(1:n,n,replace=T,prob=w_n)
lambda = lambda[idx,,,]
mu = mu[idx,,,]
omega = omega[idx,,,]
w_n = rep(1/n,n)
}
}
idx1 = mu[,50,1,j]>8
idx2 = mu[,50,2,j]>8
mu10 = c(mu[idx1,50,1,j],mu[idx2,50,2,j])
mu7 = c(mu[!idx1,50,1,j],mu[!idx2,50,2,j])
omega10 = c(omega[idx1,50,1,j],omega[idx2,50,2,j])
omega7 = c(omega[!idx1,50,1,j],omega[!idx2,50,2,j])
lambda_all = c(lambda[,50,1,j],lambda[,50,2,j])
mse.mu[j] = mse.mu[j] + (mean(mu7)-7)^2+var(mu7)+(mean(mu10)-10)^2+var(mu10)
mse.omega[j] = mse.omega[j] +  (mean(omega10)-0.3)^2+var(omega10)
mse.lambda[j] = mse.lambda[j] + (mean(lambda_all)-4)^2+var(lambda_all)
}
mse.mu = mse.mu/n
mse.lambda = mse.lambda/n
mse.omega = mse.omega/n
return(list(mse.mu=mse.mu,mse.lambda=mse.lambda,mse.omega=mse.omega,mean.mu7=mean(mu7),mean.omega10=mean(omega10),mean.lambda=mean(lambda_all)))
}
res = foreach (l = 1:m,.combine = rbind,.packages = "Boom") %dopar% {
set.seed(l)
doit()
}
doit <- function(){
mu = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))# the first layer is mu1, the second layer is mu2, the same is as follows
lambda = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))
omega = array(rep(0,n*p*2*length(threshold)),c(n,p,2,length(threshold)))
mse.mu = rep(0,length(threshold))
mse.omega = rep(0,length(threshold))
mse.omega = rep(0,length(threshold))
w_u = rep(0,n)
w_u.tmp = rep(0,n)
for (j in 1:length(threshold)) {
for (i in 1:n){
mu[i,1,,j] = rnorm(2,kexi,K^(-1/2))
lambda[i,1,,j] = rgamma(2,alpha,beta)
omega[i,1,,j] = rdirichlet(1,c(delta,delta))
}
## estimate weights for step 1
for (i in 1:n) {
w_u[i] = exp(log.fn(1,mu[i,1,,j],lambda[i,1,,j],omega[i,1,,j]))/prod(dnorm(mu[i,1,,j],kexi,K^(-1/2)))/prod(dgamma(lambda[i,1,,j],alpha,beta))/ddirichlet(omega[i,1,,j],c(delta,delta))
}
w_n = w_u/sum(w_u)
if (1/sum(w_n^2) < n){
idx = sample(1:n,n,replace=T,prob=w_n)
lambda = lambda[idx,,,]
mu = mu[idx,,,]
omega = omega[idx,,,]
w_n = rep(1/n,n)
}
## MAIN LOOP
for (i in 2:p){
if (any(is.na(w_n))){
lambda[,,1,j] = 9999
lambda[,,2,j] = 0
omega[,,1,j] = 1
omega[,,2,j] = 0
mu[,,1,j] = 9999
mu[,,2,j] = 0
break
}
## MCMC Move
mu.update = array(rnorm(n*2,0,.1),c(n,2))
mu.tmp = mu[,i-1,,j]+mu.update
lambda.update = array(rlnorm(n*2,0,.1),c(n,2))
lambda.tmp = lambda[,i-1,,j]*lambda.update
u.update = rnorm(n,0,.1)
u.tmp = log(omega[,i-1,1,j]/(1-omega[,i-1,1,j]))+u.update
omega.tmp = omega[,i-1,,j]
omega.tmp[,1] = exp(u.tmp)/(1+exp(u.tmp))
omega.tmp[,2] = 1-omega.tmp[,1]
# 加个循环把每个样本都MCMC update了
## 这里由于三个一起update所以效益可能会低，要不要查查它update一共多少次
for (k in 1:n) {
acrate.mu = acceptance.mu(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.lambda1 = acceptance.lambda1(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.lambda2 = acceptance.lambda2(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
acrate.omega = acceptance.omega(i,mu.tmp[k,],lambda.tmp[k,],omega.tmp[k,],mu[k,i-1,,j],lambda[k,i-1,,j],omega[k,i-1,,j])
rand = runif(1)
if (rand<=acrate.mu){
mu[k,i,,j] = mu.tmp[k,]
}else{
mu[k,i,,j] = mu[k,i-1,,j]
}
if (rand<=acrate.lambda1){
lambda[k,i,1,j] = lambda.tmp[k,1]
}else{
lambda[k,i,1,j] = lambda[k,i-1,1,j]
}
if (rand<=acrate.lambda2){
lambda[k,i,2,j] = lambda.tmp[k,2]
}else{
lambda[k,i,2,j] = lambda[k,i-1,2,j]
}
if (rand<=acrate.omega){
omega[k,i,,j] = omega.tmp[k,]
}else{
omega[k,i,,j] = omega[k,i-1,,j]
}
divident=0
for (o in 1:n) {
divident = divident + exp(log.fn(i-1,mu[o,i-1,,j],lambda[o,i-1,,j],omega[o,i-1,,j]))*Kn(mu[k,i,,j],lambda[k,i,,j],omega[k,i,,j],mu[o,i-1,,j],lambda[o,i-1,,j],omega[o,i-1,,j])
}
w_u.tmp[k] = exp(log.fn(i,mu[k,i,,j],lambda[k,i,,j],omega[k,i,,j]))/divident
}
w_u = w_n*w_u.tmp
w_n = w_u/sum(w_u)
## Resampling
if (any(is.na(w_n))){
lambda[,,1,j] = 9999
lambda[,,2,j] = 0
omega[,,1,j] = 1
omega[,,2,j] = 0
mu[,,1,j,] = 9999
mu[,,2,j] = 0
break
}
if (1/sum(w_n^2)<threshold[j]){
idx = sample(1:n,n,replace=T,prob=w_n)
lambda = lambda[idx,,,]
mu = mu[idx,,,]
omega = omega[idx,,,]
w_n = rep(1/n,n)
}
}
idx1 = mu[,50,1,j]>8
idx2 = mu[,50,2,j]>8
mu10 = c(mu[idx1,50,1,j],mu[idx2,50,2,j])
mu7 = c(mu[!idx1,50,1,j],mu[!idx2,50,2,j])
omega10 = c(omega[idx1,50,1,j],omega[idx2,50,2,j])
omega7 = c(omega[!idx1,50,1,j],omega[!idx2,50,2,j])
lambda_all = c(lambda[,50,1,j],lambda[,50,2,j])
mse.mu[j] = mse.mu[j] + (mean(mu7)-7)^2+var(mu7)+(mean(mu10)-10)^2+var(mu10)
mse.omega[j] = mse.omega[j] +  (mean(omega10)-0.3)^2+var(omega10)
mse.lambda[j] = mse.lambda[j] + (mean(lambda_all)-4)^2+var(lambda_all)
}
mse.mu = mse.mu/n
mse.lambda = mse.lambda/n
mse.omega = mse.omega/n
return(list(mse.mu=mse.mu,mse.lambda=mse.lambda,mse.omega=mse.omega,mean.mu7=mean(mu7),mean.omega10=mean(omega10),mean.lambda=mean(lambda_all)))
}
res = foreach (l = 1:m,.combine = rbind,.packages = "Boom") %dopar% {
set.seed(l)
doit()
}
setwd("C:/Users/xuzhi/smcresampfreq/Gaussian Mixture")
length(threshold)
