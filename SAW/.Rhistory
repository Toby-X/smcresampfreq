x[i] = alpha*x[i-1]+sigma*v[i]
y[i] = beta*exp(x[i]/2)*u[i]
}
X[,1] = rnorm(n,0,sqrt(sigma^2/(1-alpha^2)))
W = dnorm(y[1],0,beta*exp(X[,1]/2))
w = W/sum(W)
x.estimate.ss1[1] = sum(w*X[,1])
idx = sample(1:n,n,replace = T,prob = w)
X = X[idx,]
W = rep(1,n)/n
for (i in 2:t) {
X[,i]=rnorm(n,alpha*X[,i-1],sigma)
lW.tmp = log(dnorm(y[i],0,beta*exp(X[,i]/2)))
W = W*exp(lW.tmp)
w = W/sum(W)
x.estimate.ss1[i] = sum(w*X[,i])
idx = sample(1:n,n,replace = T,prob = w)
X = X[idx,]
W = rep(1,n)/n
}
X[,1] = rnorm(n,0,sqrt(sigma^2/(1-alpha^2)))
W = dnorm(y[1],0,beta*exp(X[,1]/2))
w = W/sum(W)
x.estimate.ss2[1] = sum(w*X[,1])
for (i in 2:t) {
X[,i]=rnorm(n,alpha*X[,i-1],sigma)
lW.tmp = log(dnorm(y[i],0,beta*exp(X[,i]/2)))
W = W*exp(lW.tmp)
w = W/sum(W)
x.estimate.ss2[i] = sum(w*X[,i])
}
library(tidyverse)
data = data.frame(1:length(x),x,x.estimate.ss1,x.estimate.ss2)
colnames(data) = c("idx","ori","Resamp","NoResamp")
data.n = data %>% pivot_longer("ori":"NoResamp",names_to = "cat")
ggplot(data.n)+
geom_line(aes(idx,value,col=cat),linewidth=1)
x = matrix(1:4,nrow = 2)
intersect(x,2)
intersect(x,4)
intersect(x,5)
intersect(x,5) == T
x
setequal(x,c(1,2))
?setequal
apply(x,2,setequal,y=c(1,2))
apply(x,1,setequal,y=c(1,2))
apply(x,2,setequal,y=c(1,2))
any(apply(x,2,setequal,y=c(1,2)))
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt
nrow(nxt)
length(numeric(0))
nxt.r = c(0,0)
nxt.r = nxt.r[-1,]
nxt.r = nxt.r[1,]
nxt.r = matrix(c(0,0),nrow=1)
nxt.r = nxt.r[-1,]
nrow(nxt.r)
nrows(nxt.r)
#-*- coding: utf-8 -*-
# simulate SAW using growth method for a 2D template
t = 200 # length of SAW
n_particles = 500 # number of particles
d = 2
find_next <- function(t, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.temp = x[t-1,] + nxt[i,]
if (!any(apply(x[1:(t-1),], 2, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = nxt.r[-1,]
return(nxt.r)
}
X = array(rep(0,n_particles*t*d),c(n_particles,t,d))
W = rep(1/n_particles,n_particles)
for (i in 2:t) {
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
W[k] = W[k] * nt
if (nt != 0){
nid = sample(1:nt,1)
X[k,t,] = X[k,t-1,]+avail[nid,]
}else{
X[k,t,] = X[k,t-1,]
}
}
w = W/sum(W)
if (1/w^2<n_particles){
idx = sample(1:n_particles,n_particles,replace = T,prob = w)
X = X[idx,,]
W = rep(1/n_particles,n_particles)
}
}
find_next <- function(t, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.temp = x[t-1,] + nxt[i,]
if (!any(apply(x, 2, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = nxt.r[-1,]
return(nxt.r)
}
X = array(rep(0,n_particles*t*d),c(n_particles,t,d))
W = rep(1/n_particles,n_particles)
for (i in 2:t) {
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
W[k] = W[k] * nt
if (nt != 0){
nid = sample(1:nt,1)
X[k,t,] = X[k,t-1,]+avail[nid,]
}else{
X[k,t,] = X[k,t-1,]
}
}
w = W/sum(W)
if (1/w^2<n_particles){
idx = sample(1:n_particles,n_particles,replace = T,prob = w)
X = X[idx,,]
W = rep(1/n_particles,n_particles)
}
}
find_next <- function(t, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.tmp = x[t-1,] + nxt[i,]
if (!any(apply(x, 2, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = nxt.r[-1,]
return(nxt.r)
}
X = array(rep(0,n_particles*t*d),c(n_particles,t,d))
W = rep(1/n_particles,n_particles)
for (i in 2:t) {
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
W[k] = W[k] * nt
if (nt != 0){
nid = sample(1:nt,1)
X[k,t,] = X[k,t-1,]+avail[nid,]
}else{
X[k,t,] = X[k,t-1,]
}
}
w = W/sum(W)
if (1/w^2<n_particles){
idx = sample(1:n_particles,n_particles,replace = T,prob = w)
X = X[idx,,]
W = rep(1/n_particles,n_particles)
}
}
X = array(rep(0,n_particles*t*d),c(n_particles,t,d))
W = rep(1/n_particles,n_particles)
for (i in 2:t) {
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
W[k] = W[k] * nt
if (nt != 0){
nid = sample(1:nt,1)
X[k,t,] = X[k,t-1,]+avail[nid,]
}else{
X[k,t,] = X[k,t-1,]
}
}
w = W/sum(W)
if (1/sum(w^2)<n_particles){
idx = sample(1:n_particles,n_particles,replace = T,prob = w)
X = X[idx,,]
W = rep(1/n_particles,n_particles)
}
}
#-*- coding: utf-8 -*-
# simulate SAW using growth method for a 2D template
t = 200 # length of SAW
n_particles = 10 # number of particles
d = 2
find_next <- function(t, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.tmp = x[t-1,] + nxt[i,]
if (!any(apply(x, 2, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = nxt.r[-1,]
return(nxt.r)
}
X = array(rep(0,n_particles*t*d),c(n_particles,t,d))
W = rep(1/n_particles,n_particles)
for (i in 2:t) {
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
W[k] = W[k] * nt
if (nt != 0){
nid = sample(1:nt,1)
X[k,t,] = X[k,t-1,]+avail[nid,]
}else{
X[k,t,] = X[k,t-1,]
}
}
w = W/sum(W)
if (1/sum(w^2)<n_particles){
idx = sample(1:n_particles,n_particles,replace = T,prob = w)
X = X[idx,,]
W = rep(1/n_particles,n_particles)
}
}
line(X[1,,1],X[1,,2])
plot(X[1,,1],X[1,,2])
X[1,,]
#-*- coding: utf-8 -*-
# simulate SAW using growth method for a 2D template
t = 200 # length of SAW
n_particles = 10 # number of particles
d = 2
find_next <- function(p, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.tmp = x[p-1,] + nxt[i,]
if (!any(apply(x, 2, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = nxt.r[-1,]
return(nxt.r)
}
X = array(rep(0,n_particles*t*d),c(n_particles,t,d))
W = rep(1/n_particles,n_particles)
for (i in 2:t) {
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
W[k] = W[k] * nt
if (nt != 0){
nid = sample(1:nt,1)
X[k,i,] = X[k,i-1,]+avail[nid,]
}else{
X[k,i,] = X[k,i-1,]
}
}
w = W/sum(W)
if (1/sum(w^2)<n_particles){
idx = sample(1:n_particles,n_particles,replace = T,prob = w)
X = X[idx,,]
W = rep(1/n_particles,n_particles)
}
}
plot(X[1,,1],X[1,,2])
line(X[1,,1],X[1,,2])
library(tidyverse)
ggplot()+
geom_line(aes(x=X[1,,1],y=X[1,,2]))
ggplot()+
geom_path(aes(x=X[1,,1],y=X[1,,2]))
dat = data.frame(X[1,,1],X[1,,2])
colnames(dat) = c("x","y")
ggplot(data = dat)+
geom_path(aes(x,y=X))
ggplot(data = dat)+
geom_path(aes(x,y=y))
?geom_path
?plot
plot(X[1,,1],X[1,,2],type="b")
plot(X[1,,1],X[1,,2],type="l")
View(dat)
any(apply(as.matrix(X[1,,]), 2, c(-1,1)))
any(apply(as.matrix(X[1,,]), 2, setequal,c(-1,1)))
any(apply(as.matrix(X[1,,]), 1, setequal,c(-1,1)))
head(as.matrix(X[1,,]))
find_next <- function(p, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.tmp = x[p-1,] + nxt[i,]
if (!any(apply(x, 1, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = nxt.r[-1,]
return(nxt.r)
}
X = array(rep(0,n_particles*t*d),c(n_particles,t,d))
W = rep(1/n_particles,n_particles)
for (i in 2:t) {
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
W[k] = W[k] * nt
if (nt != 0){
nid = sample(1:nt,1)
X[k,i,] = X[k,i-1,]+avail[nid,]
}else{
X[k,i,] = X[k,i-1,]
}
}
w = W/sum(W)
if (1/sum(w^2)<n_particles){
idx = sample(1:n_particles,n_particles,replace = T,prob = w)
X = X[idx,,]
W = rep(1/n_particles,n_particles)
}
}
X = array(rep(0,n_particles*t*d),c(n_particles,t,d))
W = rep(1/n_particles,n_particles)
for (i in 2:t) {
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
if (nt != 0){
W[k] = W[k] * nt
nid = sample(1:nt,1)
X[k,i,] = X[k,i-1,]+avail[nid,]
}else{
W[k] = 0
X[k,i,] = X[k,i-1,]
}
}
w = W/sum(W)
if (1/sum(w^2)<n_particles){
idx = sample(1:n_particles,n_particles,replace = T,prob = w)
X = X[idx,,]
W = rep(1/n_particles,n_particles)
}
}
a = matrix(c(0,0),nrow=1)
a
b = a[-1,]
b
nt = nrow(b)
nt
nt != 0
k
i
avail = find_next(i,as.matrix(X[k,,]))
avail
nt = nrow(avail)
nt
nrow(a)
nt = nrow(avail)
nt
find_next <- function(p, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.tmp = x[p-1,] + nxt[i,]
if (!any(apply(x, 1, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = as.matrix(nxt.r[-1,])
return(nxt.r)
}
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
nt
avail
nxt.r = as.matrix(nxt.r[-1,],nrow=1)
return(nxt.r)
find_next <- function(p, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.tmp = x[p-1,] + nxt[i,]
if (!any(apply(x, 1, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = as.matrix(nxt.r[-1,],nrow=1)
return(nxt.r)
}
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
avail
find_next <- function(p, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.tmp = x[p-1,] + nxt[i,]
if (!any(apply(x, 1, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = nxt.r[-1,]
return(nxt.r)
}
avail = find_next(i,as.matrix(X[k,,]))
avail
nt = NULL
is.na(nt)
is.null(nt)
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
nt
if (is.null(nt)){
W[k] = W[k]
X[k,i,] = X[k,i-1,]+avail
}else if (nt != 0){
W[k] = W[k] * nt
nid = sample(1:nt,1)
X[k,i,] = X[k,i-1,]+avail[nid,]
}else{
W[k] = 0
X[k,i,] = X[k,i-1,]
}
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
if (is.null(nt)){
W[k] = W[k]
X[k,i,] = X[k,i-1,]+avail
}else if (nt != 0){
W[k] = W[k] * nt
nid = sample(1:nt,1)
X[k,i,] = X[k,i-1,]+avail[nid,]
}else{
W[k] = 0
X[k,i,] = X[k,i-1,]
}
}
#-*- coding: utf-8 -*-
# simulate SAW using growth method for a 2D template
t = 200 # length of SAW
n_particles = 10 # number of particles
d = 2
find_next <- function(p, x){
# x is a sequence of 2D, t is the current time
nxt = rbind(c(1,0),c(-1,0),c(0,1),c(0,-1))
nxt.r = matrix(c(0,0),nrow=1)
for (i in 1:nrow(nxt)) {
x.tmp = x[p-1,] + nxt[i,]
if (!any(apply(x, 1, setequal, y = x.tmp))){
nxt.r = rbind(nxt.r,nxt[i,])
}
}
nxt.r = nxt.r[-1,]
return(nxt.r)
}
X = array(rep(0,n_particles*t*d),c(n_particles,t,d))
W = rep(1/n_particles,n_particles)
for (i in 2:t) {
for (k in 1:n_particles) {
avail = find_next(i,as.matrix(X[k,,]))
nt = nrow(avail)
if (is.null(nt)){
W[k] = W[k]
X[k,i,] = X[k,i-1,]+avail
}else if (nt != 0){
W[k] = W[k] * nt
nid = sample(1:nt,1)
X[k,i,] = X[k,i-1,]+avail[nid,]
}else{
W[k] = 0
X[k,i,] = X[k,i-1,]
}
}
w = W/sum(W)
if (1/sum(w^2)<n_particles){
idx = sample(1:n_particles,n_particles,replace = T,prob = w)
X = X[idx,,]
W = rep(1/n_particles,n_particles)
}
}
plot(X[1,,1],X[1,,2],type="l")
x.estimate[,1,j] = w%*%as.matrix(X[,,1])
x.estimate = array(rep(0,t*length(threshold)*d),c(t,d,length(threshold)))
threshold = seq(0,1,by=.1)
x.estimate = array(rep(0,t*length(threshold)*d),c(t,d,length(threshold)))
x.estimate[,1,j] = w%*%as.matrix(X[,,1])
j=11
x.estimate[,1,j] = w%*%as.matrix(X[,,1])
x.estimate[,2,j] = w%*%as.matrix(X[,,2])
x.estimate[,1,j]
setwd("C:/Users/xuzhi/smcresampfreq/SAW")
load("SAWR.RData")
# cn0 = 1.17704242*2.638^t*t^(43/32-1)
cn0 = 44100
cn = matrix(rep(0,m*length(threshold)),nrow=m)
for (i in 1:m) {
cn[i,] = res[i,]$cn
}
mse = rep(0,length(threshold))
for (j in 1:length(threshold)) {
mse[j] = sum((cn[,j]-cn0)^2)
}
plot(mse)
