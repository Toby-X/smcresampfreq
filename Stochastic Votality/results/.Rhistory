lambda = lambda[idx,,]
mu = mu[idx,,]
omega = omega[idx,,]
w_n = rep(1/n,n)
}
##monitor accepted times
ac.mu = array(rep(0,n*p),c(n,p))
ac.lambda = array(rep(0,n*p*2),c(n,p,2))
ac.omega = array(rep(0,n*p),c(n,p))
## MAIN LOOP
star_time <- Sys.time()
w_u.tmp = rep(1,n)
i = 2
## MCMC Move
mu.update = array(rnorm(n*2,0,.1),c(n,2))
mu.tmp = mu[,i-1,]+mu.update
str(mu[,i-1,])
str(mu.update)
## Using suboptimal backward kernels
## extract the first sample
for (i in 1:n){
mu[i,1,] = rnorm(2,kexi,K^(-1/2))
lambda[i,1,] = rgamma(2,alpha,beta)
omega[i,1,] = rdirichlet(1,c(delta,delta))
}
mu = array(rep(0,n*p*2),c(n,p,2))# the first layer is mu1, the second layer is mu2, the same is as follows
lambda = array(rep(0,n*p*2),c(n,p,2))
omega = array(rep(0,n*p*2),c(n,p,2))
wu = rep(0,n)
## Using suboptimal backward kernels
## extract the first sample
for (i in 1:n){
mu[i,1,] = rnorm(2,kexi,K^(-1/2))
lambda[i,1,] = rgamma(2,alpha,beta)
omega[i,1,] = rdirichlet(1,c(delta,delta))
}
## estimate weights for step 1
w_u = rep(1,n)
for (i in 1:n) {
w_u[i] = exp(log.fn(1,mu[i,1,],lambda[i,1,],omega[i,1,]))/prod(dnorm(mu[i,1,],kexi,K^(-1/2)))/prod(dgamma(lambda[i,1,],alpha,beta))/ddirichlet(omega[i,1,],c(delta,delta))
}
if (any(is.na(w_u))){
idx.na = is.na(w_u)
w_u[idx.na]=0
}
w_n = w_u/sum(w_u)
w_n
w = w_n
w
n = length(w)
n
a = rep(0,n)
nw = n*w
intpart = floor(nw)
sip = sum(intpart)
sip
res = nw - intpart
sres = n - sip
sres
a[1:sip] = rep(1:n,intpart)
a[1:sip]
a[sip+1]
res
sres
if (sres > 0){
a[(sip+1):n] = sample(1:n,sres,prob=res/sres)
}
a[(sip+1):n]
#using residual ressampling
resresample <- function(w){
n = length(w)
a = rep(0,n)
nw = n*w
intpart = floor(nw)
sip = sum(intpart)
res = nw - intpart
sres = n - sip
a[1:sip] = rep(1:n,intpart)
if (sres > 0){
a[(sip+1):n] = sample(1:n,sres,prob=res/sres)
}
return(a)
}
if (1/sum(w_n^2) < threshold){
idx = resresample(w_n)
lambda = lambda[idx,,]
mu = mu[idx,,]
omega = omega[idx,,]
w_n = rep(1/n,n)
}
##monitor accepted times
ac.mu = array(rep(0,n*p),c(n,p))
ac.lambda = array(rep(0,n*p*2),c(n,p,2))
ac.omega = array(rep(0,n*p),c(n,p))
## MAIN LOOP
star_time <- Sys.time()
w_u.tmp = rep(1,n)
i= 2
## MCMC Move
mu.update = array(rnorm(n*2,0,.1),c(n,2))
mu.tmp = mu[,i-1,]+mu.update
lambda.update = array(rlnorm(n*2,0,.1),c(n,2))
?var
t = 50##dimension
n = 500##number of particles
N = 1e6
m = 200##first parallel to yield mse
p = 192## parallel experiments
alpha=0.91
sigma=1.0
beta=0.5
W=rep(1,n)/n
threshold = seq(.1,1,by=0.1)
x = rep(0,t)
y = rep(0,t)
X = matrix(rep(0,n*t),nrow=n)
X0 = matrix(rep(0,N*t),nrow=N)
x.estimate.ss = array(rep(0,t*m*length(threshold)),c(m,t,length(threshold)))
x.estimate.ori = rep(0,t)
set.seed(l)
##Generate Samples
v = rnorm(t)
u = rnorm(t)
x[1] = rnorm(1,0,sigma^2/(1-alpha^2))
y[1] = beta*exp(x[1]/2)*u[1]
for (i in 2:t){
x[i] = alpha*x[i-1]+sigma*v[i]
y[i] = beta*exp(x[i]/2)*u[i]
}
j = 1
X[,1] = rnorm(n)
W = dnorm(X[,1],0,sigma^2/(1-alpha^2))*dnorm(y[i],0,beta*exp(X[,i]/2))/dnorm(X[,1])
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,1,j] = sum(w*X[,1])
l = 1
x.estimate.ss[l,1,j] = sum(w*X[,1])
if (1/sum(w^2) < threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
for (i in 2:t) {
X[,i]=rnorm(n,X[,i-1]+y[i])
lW.tmp = log(dnorm(X[,i],alpha*X[,i-1],sigma^2))+log(dnorm(y[i],0,beta*exp(X[,i]/2)))-log(dnorm(X[,i],X[,i-1]+y[i]))
if (all(lW.tmp<log(1e-200))){
lW.tmp = lW.tmp + log(1e300)
}
if (all(exp(lW.tmp)==0)){
cat("i=",i)
}
W = W*exp(lW.tmp)
if (all(W<1e-50)){
W = W*1e100
}
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,i,j] = sum(w*X[,i])
if (1/sum(w^2)<threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
}
W
plot(x)
l = 2
##Generate Samples
v = rnorm(t)
u = rnorm(t)
x[1] = rnorm(1,0,sigma^2/(1-alpha^2))
y[1] = beta*exp(x[1]/2)*u[1]
for (i in 2:t){
x[i] = alpha*x[i-1]+sigma*v[i]
y[i] = beta*exp(x[i]/2)*u[i]
}
X[,1] = rnorm(n)
W = dnorm(X[,1],0,sigma^2/(1-alpha^2))*dnorm(y[i],0,beta*exp(X[,i]/2))/dnorm(X[,1])
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,1,j] = sum(w*X[,1])
if (1/sum(w^2) < threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
for (i in 2:t) {
X[,i]=rnorm(n,X[,i-1]+y[i])
lW.tmp = log(dnorm(X[,i],alpha*X[,i-1],sigma^2))+log(dnorm(y[i],0,beta*exp(X[,i]/2)))-log(dnorm(X[,i],X[,i-1]+y[i]))
if (all(lW.tmp<log(1e-200))){
lW.tmp = lW.tmp + log(1e300)
}
if (all(exp(lW.tmp)==0)){
cat("i=",i)
}
W = W*exp(lW.tmp)
if (all(W<1e-50)){
W = W*1e100
}
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,i,j] = sum(w*X[,i])
if (1/sum(w^2)<threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
}
plot(x.estimate.ss[2,,])
plot(x.estimate.ss[2,,1])
l = 3
##Generate Samples
v = rnorm(t)
u = rnorm(t)
x[1] = rnorm(1,0,sigma^2/(1-alpha^2))
y[1] = beta*exp(x[1]/2)*u[1]
for (i in 2:t){
x[i] = alpha*x[i-1]+sigma*v[i]
y[i] = beta*exp(x[i]/2)*u[i]
}
X[,1] = rnorm(n)
W = dnorm(X[,1],0,sigma^2/(1-alpha^2))*dnorm(y[i],0,beta*exp(X[,i]/2))/dnorm(X[,1])
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,1,j] = sum(w*X[,1])
if (1/sum(w^2) < threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
for (i in 2:t) {
X[,i]=rnorm(n,X[,i-1]+y[i])
lW.tmp = log(dnorm(X[,i],alpha*X[,i-1],sigma^2))+log(dnorm(y[i],0,beta*exp(X[,i]/2)))-log(dnorm(X[,i],X[,i-1]+y[i]))
if (all(lW.tmp<log(1e-200))){
lW.tmp = lW.tmp + log(1e300)
}
if (all(exp(lW.tmp)==0)){
cat("i=",i)
}
W = W*exp(lW.tmp)
if (all(W<1e-50)){
W = W*1e100
}
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,i,j] = sum(w*X[,i])
if (1/sum(w^2)<threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
}
l = 4
set.seed(l)
##Generate Samples
v = rnorm(t)
u = rnorm(t)
x[1] = rnorm(1,0,sigma^2/(1-alpha^2))
y[1] = beta*exp(x[1]/2)*u[1]
for (i in 2:t){
x[i] = alpha*x[i-1]+sigma*v[i]
y[i] = beta*exp(x[i]/2)*u[i]
}
X[,1] = rnorm(n)
W = dnorm(X[,1],0,sigma^2/(1-alpha^2))*dnorm(y[i],0,beta*exp(X[,i]/2))/dnorm(X[,1])
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,1,j] = sum(w*X[,1])
if (1/sum(w^2) < threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
for (i in 2:t) {
X[,i]=rnorm(n,X[,i-1]+y[i])
lW.tmp = log(dnorm(X[,i],alpha*X[,i-1],sigma^2))+log(dnorm(y[i],0,beta*exp(X[,i]/2)))-log(dnorm(X[,i],X[,i-1]+y[i]))
if (all(lW.tmp<log(1e-200))){
lW.tmp = lW.tmp + log(1e300)
}
if (all(exp(lW.tmp)==0)){
cat("i=",i)
}
W = W*exp(lW.tmp)
if (all(W<1e-50)){
W = W*1e100
}
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,i,j] = sum(w*X[,i])
if (1/sum(w^2)<threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
}
#-*- coding:utf-8 -*-
library(parallel)
library(foreach)
library(doSNOW)
numCores = detectCores()
cl = makeCluster(numCores)
registerDoSNOW(cl)
m = 192
## doSNOW progress bar
pb = txtProgressBar(max = m,style=3)
progress = function(n) setTxtProgressBar(pb,n)
opts = list(progress=progress)
##INITIAL VALUES
t = 50##dimension
n = 500##number of particles
m = 200##first parallel to yield mse
p = 48## parallel experiments
alpha=0.91
sigma=1.0
beta=0.5
W=rep(1,n)/n
threshold = seq(.1,1,by=0.1)
doit <- function(l){
x = rep(0,t)
y = rep(0,t)
X = matrix(rep(0,n*t),nrow=n)
X0 = matrix(rep(0,N*t),nrow=N)
x.estimate.ss = array(rep(0,t*m*length(threshold)),c(m,t,length(threshold)))
x.estimate.ori = rep(0,t)
set.seed(l)
##Generate Samples
v = rnorm(t)
u = rnorm(t)
x[1] = rnorm(1,0,sigma^2/(1-alpha^2))
y[1] = beta*exp(x[1]/2)*u[1]
for (i in 2:t){
x[i] = alpha*x[i-1]+sigma*v[i]
y[i] = beta*exp(x[i]/2)*u[i]
}
for (l in 1:m) {
for (j in 1:length(threshold)){#change of series
X[,1] = rnorm(n)
W = dnorm(X[,1],0,sigma^2/(1-alpha^2))*dnorm(y[i],0,beta*exp(X[,i]/2))/dnorm(X[,1])
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,1,j] = sum(w*X[,1])
if (1/sum(w^2) < threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
for (i in 2:t) {
X[,i]=rnorm(n,X[,i-1]+y[i])
lW.tmp = log(dnorm(X[,i],alpha*X[,i-1],sigma^2))+log(dnorm(y[i],0,beta*exp(X[,i]/2)))-log(dnorm(X[,i],X[,i-1]+y[i]))
if (all(lW.tmp<log(1e-200))){
lW.tmp = lW.tmp + log(1e300)
}
if (all(exp(lW.tmp)==0)){
cat("i=",i)
}
W = W*exp(lW.tmp)
if (all(W<1e-50)){
W = W*1e100
}
if (any(is.na(W))){
idx = is.na(W)
W[idx] = 0
}
w = W/sum(W)
x.estimate.ss[l,i,j] = sum(w*X[,i])
if (1/sum(w^2)<threshold[j]*n){
idx = sample(1:n,n,prob = w, replace = T)
X = X[idx,]
W = rep(1/n,n)
}
}
}
}
mse.ss <- matrix(rep(0,length(threshold)*t),nrow=length(threshold))
for (k in 1:length(threshold)){
for (i in 1:m)
{
mse.ss[k,] = mse.ss[k,]+(x-x.estimate.ss[i,,k])^2
}
}
mse.ss = mse.ss/m
mse.sum.ss <- rowSums(mse.ss)
return(list(mse = mse.sum.ss, x.estimate=x.estimate.ss, x=x))
}
res = foreach (l = 1:p,.combine = rbind,.packages = "Boom",
.options.snow=opts) %dopar% {
return(doit(l))
}
gc()
gc()
gc()
infty
inf
+inf
Inf
-Inf
0>-Inf
is.na(Inf)
is.infinite(Inf)
is.infinite(0)
log(1e200)
log(1e-200)
1e-312
-Inf+200
threshold = c(1)
length(threshold)
setwd("C:/Users/xuzhi/smcresampfreq/Stochastic Votality")
load("Base.RData")
mse.ss
mse.sum.ss
#-*- coding:utf-8 -*-
alpha_91_ori = read.csv("mse_all_sys_alpha91_ori.csv")
setwd("C:/Users/xuzhi/smcresampfreq/Stochastic Votality/results")
#-*- coding:utf-8 -*-
alpha_91_ori = read.csv("mse_all_sys_alpha91_ori.csv")
View(alpha_91_ori)
#-*- coding:utf-8 -*-
alpha_91_ori = read.csv("mse_all_sys_alpha91_ori.csv",header = F)
plot(alpha_p1_ori[1,])
plot(alpha_91_ori[1,])
alpha_91_ori = as.matrix(alpha_91_ori)
plot(alpha_91_ori[1,])
alpha_91_ori_m = colMeans(alpha_91_ori)
plot(alpha_91_ori_m)
boxplot(alpha_91_ori)
a = which.max(alpha_91_ori[,4])
alpha_91_ori_m = colMeans(alpha_91_ori[-a,])
plot(alpha_91_ori_m)
alpha_91 = read.csv("mse_all_sys_alpha91.csv",header = F)
alpha_91 = as.matrix(alpha_91)
boxplot(alpha_91)
alpha_91_m = colMeans(alpha_91)
plot(alpha_91_m)
alpha_08 = read.csv("mse_all_alpha_08.csv", header=F)
alpha_08 = as.matrix(alpha_08)
boxplot(alpha_08)
alpha_08_m = colMeans(alpha_08)
plot(alpha_08_m)
alpha_08_ori = read.csv("mse_all_alpha_08_ori.csv", header=F)
alpha_08_ori = as.matrix(alpha_08_ori)
boxplot(alpha_08_ori)
alpha_08_ori_m = colMeans(alpha_08_ori)
plot(alpha_08_ori_m)
for (i in 1:length(alpha_08_ori[,1])) {
plot(alpha_08_ori[i,])
}
for (i in 1:length(alpha_08_ori[,1])) {
plot(alpha_08_ori[i,])
}
for (i in 1:length(alpha_08[,1])) {
plot(alpha_08[i,])
}
plot(alpha_91_ori_m)
plot(alpha_91_ori[1,])
plot(alpha_91_ori[2,])
plot(alpha_91_ori[3,])
plot(alpha_91_ori[4,])
plot(alpha_91_ori[5,])
plot(alpha_91_ori[6,])
plot(alpha_91_ori[7,])
plot(alpha_91_ori[6,])
ess = seq(0.1,1,by=10)
plot(ess,alpha_91_ori[6,],xlab = "ESS", ylab = "MSE")
str(alpha_91_m)
str(ess)
ess = seq(0.1,1,by=0.1)
plot(ess,alpha_91_ori[6,],xlab = "ESS", ylab = "MSE")
plot(ess,alpha_91_ori[6,],xlab = "ESS Threshold", ylab = "MSE")
plot(alpha_91_m)
plot(alpha_91_m[1,])
plot(alpha_91[1,])
plot(alpha_91[2,])
plot(alpha_91[3,])
plot(ess, alpha_91[2,], xlab = "ESS Threshold", ylab = "MSE")
plot(alpha_08[1,])
plot(alpha_08[2,])
plot(alpha_08[3,])
plot(alpha_08[4,])
plot(ess,alpha_08[4,],xlab = "ESS Threshold", ylab = "MSE")
plot(alpha_08_ori[9,])
plot(alpha_08_ori[10,])
plot(alpha_08_ori[8,])
plot(alpha_08_ori[7,])
plot(alpha_08_ori[6,])
plot(ess, alpha_08_ori[6,], xlab = "ESS Threshold", ylab="MSE")
